// Convert to lowercase
    transform(str.begin(), str.end(), str.begin(), ::tolower);
 
// sort
	sort(nums.begin(),nums.end());
// count 
	count(row.begin(),row.end(),0);  //ekhane row te koyta 0 ase ta count kore;
	
// ascii range
	x>=65 && x<=90 || x>=97 && x<=122 || x>=48 && x<=57
	
	
# string theke ekta ekta kore input nile char dey
 
how to get space input in cpp - getline(cin, variable)
//char to string
string s(1,'@')


// how to use priority queue
struct compareNode{
        bool operator()(const ListNode* a,const ListNode* b){
            return a->val>b->val;
        }
};

    // gives minimum
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        priority_queue<ListNode* , vector<ListNode*>,compareNode> pq;

        for(auto x:lists){
            while(x){
                pq.push(x);
                x=x->next;
            }
        }
        
// how to check is a row exists or not.
vector<vector<int>> temp;
	if(i>=0 && i<temp.size()){
		exists;
	}else{
		does not exist;
	}
	
	
	
**** BST ***
in Order Traversal
	left->root->right (in a bst, gives sorted list ascending order)
pre order Traversal
	root->left->right 
post order traversal
	left->right->root
level Order traversal
	er jonno queue use korte hobe



********************* HASHMAP on C++ ******************************
	unordered_map<string, int> ageMap;

	// Insert elements
    ageMap["Alice"] = 25;
    ageMap["Bob"] = 30;
    ageMap["Charlie"] = 35;

    // Access elements
    cout << "Alice's age: " << ageMap["Alice"] << endl;

    // Check if a key exists
    if (ageMap.find("David") == ageMap.end()) {
        cout << "David is not in the map." << endl;
    }

    // Iterate through the map
    for (const auto& pair : ageMap) {
        cout << pair.first << ": " << pair.second << endl;
    }

    // Remove an element
    ageMap.erase("Bob");

    // Size of the map
    cout << "Size of the map: " << ageMap.size() << endl;

    return 0;
